
# 驱动配置信息

# mysql驱动包
spring.datasource.driverClassName=${datasource.driverClassName}
# 数据库地址
spring.datasource.url=${base.datasource.url}
# 数据库账号
spring.datasource.username=${base.datasource.username}
# 数据库密码
spring.datasource.password=${base.datasource.password}


#连接池的配置信息

# 连接池的最大值，同一时间可以从池分配的最多连接数量，0时无限制
spring.datasource.maxActive=${datasource.maxActive}

# 连接初始值，连接池启动时创建的连接数量的初始值
spring.datasource.initialSize=${datasource.initialSize}

# 连接被用完时等待归还的最大等待时间，单位毫秒，超出时间抛异常，默认为无限等待
spring.datasource.maxWait=${datasource.maxWait}

# 最大空闲值.当经过一个高峰时间后，连接池可以慢慢将已经用不到的连接慢慢释放一部分，一直减少到maxIdle为止 ，0时无限制
spring.datasource.maxIdle=${datasource.maxIdle}

# 最小空闲值.当空闲的连接数少于阀值时，连接池就会预申请去一些连接，以免洪峰来时来不及申请
spring.datasource.minIdle=${datasource.minIdle}

# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.timeBetweenEvictionRunsMillis=${datasource.timeBetweenEvictionRunsMillis}

# 是否对已备语句进行池管理（布尔值），是否对PreparedStatement进行缓存
spring.datasource.poolPreparedStatements=${datasource.poolPreparedStatements}

# 用于验证连接是否成功的查询SQL语句，SQL语句必须至少要返回一行数据， 如你可以简单地设置为：“select count(*) from user”
spring.datasource.validationQuery=${datasource.validationQuery}

# 配置一个连接在池中最小生存的时间，单位是毫秒
spring.datasource.minEvictableIdleTimeMillis=${datasource.minEvictableIdleTimeMillis}

#  指明连接是否被空闲连接回收器(如果有)进行检验.如果检测失败,则连接将被从池中去除.注意: 设置为true后如果要生效,validationQuery参数必须设置为非空字符串
spring.datasource.testWhileIdle=${datasource.testWhileIdle}

# 指明是否在从池中取出连接前进行检验,如果检验失败,则从池中去除连接并尝试取出另一个. 注意: 设置为true后如果要生效,validationQuery参数必须设置为非空字符串
spring.datasource.testOnBorrow=${datasource.testOnBorrow}

# 指明是否在归还到池中前进行检验 注意: 设置为true后如果要生效,validationQuery参数必须设置为非空字符串
spring.datasource.testOnReturn=${datasource.testOnReturn}

# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
spring.datasource.filters=${datasource.filters}

